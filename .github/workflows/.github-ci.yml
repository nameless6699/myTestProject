name: Android CI/CD

on:
  push:
    branches:
      - master  # 触发 CI/CD 的分支
  pull_request:
    branches:
      - master  # 监听到 PR 到 main 分支时触发 CI/CD

jobs:
  lint:
    runs-on: ubuntu-latest  # 使用 Ubuntu 作为运行环境

    steps:
      - name: Check out repository
        uses: actions/checkout@v2  # 检出当前仓库代码

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install commitlint
        run: |
          npm install -g @commitlint/cli @commitlint/config-conventional

      - name: Run commitlint
        run: |
          if [ "${GITHUB_SHA}" = "0000000000000000000000000000000000000000" ]; then
            echo "commitlint from HEAD^"
            npx commitlint -x @commitlint/config-conventional -f HEAD^
          else
            echo "commitlint from ${GITHUB_SHA}"
            npx commitlint -x @commitlint/config-conventional -f "${GITHUB_SHA}"
          fi

  build:
    runs-on: ubuntu-latest  # 使用 Ubuntu 作为运行环境

    steps:
      - name: Check out repository
        uses: actions/checkout@v3  # 检出当前仓库代码

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'  # 指定 Java 发行版

      - name: Set up Android SDK
        uses: android-actions/setup-android@v2
        with:
          api-level: 30
          build-tools: 30.0.3

       #  缓存 Gradle 依赖项
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-


      - name: Get version information
        id: version
        run: |
          VERSION_CODE=$(grep versionCode pos_android_studio_demo/pos_android_studio_app/build.gradle | head -n 1 | sed 's/.*versionCode\s*\([0-9]\+\).*/\1/')
          VERSION_NAME=$(grep versionName pos_android_studio_demo/pos_android_studio_app/build.gradle | head -n 1 | sed 's/.*versionName\s*"\([^"]\+\)".*/\1/')
          echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_ENV
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV  

      - name: Get commit message
        id: commit
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          COMMIT_MESSAGE=$(echo "$COMMIT_MESSAGE" | sed 's/^[0-9]\+\.[ ]*//g')
          COMMIT_MESSAGE=$(echo "$COMMIT_MESSAGE" | tr -d '\n')
          echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV

       #  解码并保存 keystore 文件
                   # -Pandroid.injected.signing.store.password=${{ vars.KEYSTORE_PASSWORD }} \
            # -Pandroid.injected.signing.key.alias=${{ vars.KEY_ALIAS }} \
            # -Pandroid.injected.signing.key.password=${{ vars.KEY_PASSWORD }}
      - name: Decode and Save Keystore
        run: |
          echo "${{ vars.KEYSTORE_FILE }}" | base64 -d > pos_android_studio_demo/app.keystore

      - name: Print Keystore Information
        run: |
          echo "Keystore Password: ${{ vars.KEYSTORE_PASSWORD }}"
          echo "Key Alias: ${{ vars.KEY_ALIAS }}"
          echo "Key Password: ${{ vars.KEY_PASSWORD }}"

      - name: Build the release signed APK
        run: |
            cd pos_android_studio_demo
            chmod +x ./gradlew
            ./gradlew assembleRelease \
            -Pandroid.injected.signing.store.file=app.keystore \
            -Pandroid.injected.signing.store.password=dspread \
            -Pandroid.injected.signing.key.alias=gundam_wing \
            -Pandroid.injected.signing.key.password=dspread

      # 保存生成的 APK 文件
      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: pos_android_studio_app-release
          path: pos_android_studio_demo/pos_android_studio_app/build/outputs/apk/release/pos_android_studio_app-release.apk

      - name: List APK files
        run: ls -R pos_android_studio_demo/pos_android_studio_app/build/outputs/apk/release  # 列出 APK 文件，确保路径正确
      
      # - name: Generate short SHA for tag
      #   id: generate_tag
      #   run: |
      #     SHORT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-7)  # 截取前7个字符
      #     echo "Generated tag: $SHORT_SHA"
      #     echo "tag_name=$SHORT_SHA" >> $GITHUB_ENV  # 将标签保存到环境变量中

      # 使用截取后的 SHA 创建 GitHub Release
      # - name: Create GitHub Release
      #   uses: actions/create-release@v1
      #   with:
      #     tag_name: ${{ env.tag_name }}  # 使用环境变量传递标签
      #     #tag_name: v${{ env.VERSION_NAME }}
      #     release_name: "Release ${{ env.VERSION_NAME }}"  # 使用短 SHA 作为 Release 名称
      #     body: "Automated release generated by GitHub Actions"
      #     draft: false
      #     prerelease: false
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # GitHub 自动生成的 Token，用于权限认证 

      # - name: List APK files
      #   run: ls -R pos_android_studio_demo/pos_android_studio_app/build/outputs/apk/release  # 列出 APK 文件，确保路径正确

   
        # 上传 APK 到 GitHub Releases
      # - name: Upload APK to GitHub Releases
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     tag_name: ${{ env.tag_name }}
      #     #tag_name: ${{ github.ref_name }}  # 使用环境变量传递标签
      #     #tag_name: v${{ env.VERSION_NAME }}
      #     files: pos_android_studio_demo/pos_android_studio_app/build/outputs/apk/release/pos_android_studio_app-release.apk  # APK 路径，确保这个路径正确
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # 使用 GitHub Token 进行认证  

    
      
  release:
    runs-on: ubuntu-latest
    needs: [build]  # 依赖于 build 作业的成功

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Download APK Artifact
        uses: actions/download-artifact@v4
        with:
          name: pos_android_studio_app-release
          path: pos_android_studio_demo/pos_android_studio_app/build/outputs/apk/release

      - name: Verify APK file in release
        run: ls -R pos_android_studio_demo/pos_android_studio_app/build/outputs/apk/release  # 列出 APK 文件，确保路径正确

      # echo "POS_SDK=$POS_SDK" >> $GITHUB_OUTPUT
      # echo "PRINT_SDK=$PRINT_SDK" >> $GITHUB_OUTPUT
      - name: Verify SDK Files
        id: verify-sdk
        run: |
            POS_SDK=$(ls pos_android_studio_demo/pos_android_studio_app/libs/dspread_pos_sdk_*.jar)
            PRINT_SDK=$(ls pos_android_studio_demo/pos_android_studio_app/libs/dspread_print_sdk-*-beta.aar)
            echo "POS_SDK=$POS_SDK"
            echo "PRINT_SDK=$PRINT_SDK"

      - name: Install Semantic Release and dependencies
        run: |
          npm install -g semantic-release @semantic-release/git @semantic-release/github @semantic-release/changelog conventional-changelog-conventionalcommits --force

      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

      - name: Generate JSON file
        run: |
          echo "Generating version information JSON file..."
          APK_DOWNLOAD_PATH="https://github.com/${{ github.repository }}/releases/download/${{ env.tag_name }}/pos_android_studio_app-release.apk"
          echo '{
            "VersionCode": "'${{ env.VERSION_CODE }}'",
            "VersionName": "'${{ env.VERSION_NAME }}'",
            "ModifyContent": "'${{ env.COMMIT_MESSAGE }}'",
            "DownloadUrl": "'$APK_DOWNLOAD_PATH'",
            "buildId": "'${GITHUB_SHA}'"
          }' > version_info.json   

      # 读取并上传 SDK 库
      - name: Upload SDK Libraries
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "Release"
          files: |
            pos_android_studio_demo/pos_android_studio_app/libs/dspread_pos_sdk_*.jar
            pos_android_studio_demo/pos_android_studio_app/libs/dspread_print_sdk-*-beta.aar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # 使用 GitHub Token 进行认证  

      # 上传 version_info.json 和library 文件
      # ${{ steps.verify-sdk.outputs.POS_SDK }}
      # ${{ steps.verify-sdk.outputs.PRINT_SDK }}
      - name: Upload JSON to GitHub Releases
        uses: softprops/action-gh-release@v1
        with:
          #tag_name: ${{ github.ref_name }}
          tag_name: "Release"
          files: version_info.json  
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # 使用 GitHub Token 进行认证
          
  deploy:
    runs-on: ubuntu-latest  # 使用 Ubuntu 作为运行环境
    needs: [build]  # 部署依赖于构建作业成功
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Deploy to the server or another location
        run: |
          echo "Deploying APK or other artifacts"
          # 可以根据需要替换为实际的部署步骤，例如上传到服务器或云平台等 

